DATATYPE NLIST;
SORT
	BOOL, LIST, NAT;
CONST
	0, 1: NAT;
	nil: LIST;
	f, t: BOOL;
VAR
	a, b, c, d: NAT;
	L, N, M: LIST;
	p, q: BOOL;
OPERATOR
	+: NAT, NAT -> NAT;
	lt: NAT, NAT -> BOOL;
	cons: NAT, LIST -> LIST;
	enter: NAT, LIST -> LIST;
	sort: LIST -> LIST;
	if: BOOL, LIST, LIST -> LIST;
	ordered: LIST -> BOOL;
	imp: BOOL, BOOL -> BOOL;
	and: BOOL, BOOL -> BOOL;
	~: BOOL -> BOOL;
NOTATION
	+, lt, cons, enter, sort, ordered, imp, and, ~: FUNCTION;
AXIOM
[1] if(t,L,M) == L;
[2] if(f,L,M) == M;

[3]  +(0,a) == a;
[4]  +(a,0) == a;
[5]  +(+(a,b),c) == +(a,+(b,c));
[6]  lt(a,0) == f;
[7]  lt(0,1) == t;
[8]  lt(0,+(1,a)) == t;
[9]  lt(1,1) == f;
[10] lt(1,+(1,a)) == lt(0,a);
[11] lt(+(1,a),1) == f;
[12] lt(+(1,a),+(1,b)) == lt(a,b);

[13] enter(a,nil) == cons(a,nil);
[14] enter(a,cons(b,L)) == if(lt(a,b),cons(a,cons(b,L)),
                                   cons(b,enter(a,L)));
[15] sort(nil) == nil;
[16] sort(cons(a,L)) == enter(a,sort(L));

[17] imp(t,p) == p;
[18] imp(f,p) == t;
[19] and(t,p) == p;
[20] and(f,p) == f;
[21] ~(q) == imp(q,f);

[22] ordered(nil) == t;
[23] ordered(cons(a,nil)) == t;
[24] ordered(cons(a,cons(b,L))) == and(~(lt(b,a)),ordered(cons(b,L)));
END
;This file is sort.typ
