[Project: ReDuX Term Primitives 
   module name        : TPTM -- Term Measurements
   modulespecification: Algorithms to measure terms.
                        taken form tcs, ica.
   programmer         : Wolfgang Kuechlin / Reinhard Buendgen
   language           : aldes
   last change        : $Date: 1997/01/15 08:17:56 $
                        by $Author: buendgen $
                        (r .1.): MXDPTH added from icax
   version            : 5 without labels
                        $Revision: 1.12 $
   bugs               : none known
   modules needed     : SAC2: low/ba, low/sy, low/lp, 
                        ReDuX: tp/dd

]

[ #include "tp.h" ]
[ #include "globs.h" ]
 
[--------------------------------------------------------------------  
     section 1.                                                         
     Main algorithms for export.                                  
----------------------------------------------------------------------]

                    d:=DEPTH(t)
[Term, depth.
t is a term. Then d is its depth, i.e. the length of the deepest path
in t.]
     safe t^,T^,t'.
(1)  [Initialize] t^:=t; d:=0.
(2)  [Trivial cases. Variable.] while TKIND(t^)=DVS do
      { T^:=VARBIND(t^); if T^ # () then t^:=T^ else return };
     [Atomic term.] if TKIND(t^) # DOS then return.
(3)  [Recursive step] T:=OARGLST(t^); 
     [Nullary operator.] if T = () then return;
     while T # () do
     { ADV(T; t',T); d:=MAX(d,DEPTH(t')) };
     d:=d+1||

                    d:=DEPTH1(t)
[Term, depth1.
t is a term.
Then d is its depth where variables have depth 0,
constants have depth 1 and other terms t have
depth1(t) = 1 + max{depth1(t_i)|t_i is subterm of t}.]
     safe t^,T^,t'.
(1)  [Initialize] t^:=t; d:=0.
(2)  [Trivial cases. Variable.] while TKIND(t^)=DVS do
      { T^:=VARBIND(t^); if T^ # () then t^:=T^ else return };
     [Atomic term.] if TKIND(t^) # DOS then { d := 1; return }.
(3)  [Recursive step] T:=OARGLST(t^); while T # () do
     { ADV(T; t',T); d:=MAX(d,DEPTH1(t')) };
     d:=d+1||

                    d:=MXDPTH(T)
[Maximal depth.
T is a list of terms. Then d is the maximal depth of the terms.]
     safe MXDPTH.
(1)  [Initialize.] d:=0; T':=T.
(2)  [Iteration on T] while T' # () do
     { ADV(T'; t,T'); d:=MAX(d,DEPTH1(t)) }||
 
                    s:=TNSIZE(T) 
[Non-atomic term, size. 
T is a non-atomic term. Then s is the size of T, not counting var- 
iable subterms. Flat AC-operators are considerd as composed of right 
associated binary AC-operators.] 
     safe s',k,t. 
(1)  [Initialize.] s:=1; c:=OARGLST(T).
(2)  [Add sizes of subterms.]while c # () do 
     { ADV(c; t,c); k:=TKIND(t); if k=DOS then 
      {s':=TNSIZE(t); s:=s+s'} else 
      [Atomic non-variable term.] if k # DVS then s:=s+1 
     }. 
(3)  [AC-operator.] if TUSTAT(T) = DAC then
     { l:=LENGTH(OARGLST(T)); s:=s+l-2 } ||
  
                    s:=TSIZE(T) 
[Term, size. 
T is a term. Then s is its size, not counting variable subterms.
Flat AC-operators are considerd as composed of right associated
binary AC-operators.] 
     safe TSIZE. 
(1)  [Trivial cases.] k:=TKIND(T); [Var.] if k=DVS then{s:=0; return} 
     else [Atomic non-variable term.] if k # DOS then {s:=1; return}.
(2)  [Non-atomic term.] s:=TNSIZE(T) || 

[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    N:=TMDOET(t)
[Term measure depending on equational theory.
t is a non-atomic term.
If the top operator of t is not in the empty theory N is the extent of 
t otherwise N is the list of the extents of the principal subterms of
t.]

(1) [Initialize.] E=TUSTAT(t).
(2) [Non-empty theory.] if E # () then { N:=TXTENT(t); return }.
(3) [Free top operator.] A:=OARGLST(t); N:=(); while A # () do
    { ADV(A; a, A); N:=COMP(TXTENT(a),N) }; N:=INV(N) ||
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]

                    s:=TNXTNT(T) 
[Non-atomic term, extent. 
T is a non-atomic term. Then s is the extent of T, a beta-digit. Flat 
AC-operators are considerd as composed of right associated binary 
AC-operators.]
     safe s',k,t. 
(1)  [Initialize.] s:=1; c:=OARGLST(T).
(2)  [Add sizes of subterms.] while c # () do 
     { ADV(c; t,c); k:=TKIND(t); if k=DOS then 
      {s':=TNXTNT(t); s:=s+s'} else s:=s+1 
     }. 
(3)  [AC-operator.] if TUSTAT(T) = DAC then
     { l:=LENGTH(OARGLST(T)); s:=s+l-2 } || 
                                                                       
                    s:=TXTENT(T)                                       
[Term, extent.                                                         
T is a term. Then s is its extent. The number of symbols in T.
Flat AC-operators are considerd as composed of right associated
binary AC-operators.]        
     safe TXTENT. 
(1)  [Initialize.] s:=1; k:=TKIND(T).
(2)  [Non-atomic term.] if k=DOS then s:=TNXTNT(T) ||
