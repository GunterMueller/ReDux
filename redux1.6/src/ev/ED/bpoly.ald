                    C:=BPSUM(r,A,B)
[Boolean ring polynomial sum. A and B are Boolean ring polynomials
in r variables, r >= 0. C=A+B.]
     safe a,b,C,f.
(1)  [A or B zero.]
     if A=0 then { C:=B; return }; if B=0 then { C:=A; return }.
(2)  [r=0.] if r=0 then
     { if A=0 /\ B=0 \/ A=1 /\ B=1 then C:=0 else C:=1; return }.
(3)  [Match coefficients.] A':=A; B':=B; C':=(); r':=r-1;
     repeat
         e:=FIRST(A'); f:=FIRST(B');
         if e > f then { ADV2(A'; e,a,A'); C':=COMP2(a,e,C') }
         else
         {
              if e < f then { ADV2(B'; f,b,B'); C':=COMP2(b,f,C') }
              else
              {
                  ADV2(A'; e,a,A'); ADV2(B'; f,b,B'); c:=BPSUM(r',a,b);
                  if c # 0 then C':=COMP2(c,e,C')
              }
         }
     until A'=() \/ B'=().
(4)  [Finish.]
     if A' = () then A':=B';
     if C' = () then C:=A' else { C:=INV(C'); SRED(C',A') };
     if C  = () then C:=0 ||

                    C:=BPPROD(r,A,B)
[Boolean ring polynomial product. A and B are Boolean ring polynomials
in r variables, r >= 0. C=A*B.]
     safe a.
(1)  [A or B zero.] if A = 0 \/ B = 0 then { C:=0; return }.
(2)  [r=0.] if r = 0 then { if A=1 /\ B=1 then C:=1 else C:=0; return }.
(3)  [General case.] A*:=CINV(A); B*:=CINV(B); C:=0; r':=r-1;
     repeat
         ADV2(B*; b,f,B*); A':=A*; C1:=0;
         repeat
             ADV2(A'; a,e,A');
             c:=BPPROD(r',a,b); e:=e+f;
             if e > 1 then e:=1;
             if c # 0 then C1:=BPSUM(r,(e,c),C1);
         until A' = ();
         C:=BPSUM(r,C,C1);
     until B* = () ||
