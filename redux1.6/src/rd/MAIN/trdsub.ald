[Subalgorithms to main program TRD.]


[ #include tp.h ]
[ #include globs.h ]
[ #include trandglobs.h ]

[-----------------------------------------------------------------------

                  Some auxiliary algorithms

-----------------------------------------------------------------------]

                    GDINII()
[Global data initialization, interactive.   First, the user is asked if
the global data should be initialized for generation of terms
distributed according to extent or depth. Then the extent/depth up to
which the global data arrays should be initialized have to be entered.
Subsequently GDINIM is called.]

     safe p, t.

(1)  [Initialize for position or depth?]
     repeat
        STOUTL("Initialize for extent or depth? [e/d] *");
        READ; t:=UCASE(CREAD());
     until MEMBER(t,('E','D')).
(2)  [Enough memory available?]
     if t='E' then
        if DIPOS=MAXPOS then {
           STROUT("The global data arrays are completely initialized.");
           STROUT("Increase MAXPOS and recompile if terms with more");
           STROUT(" than "); AWRITE(MAXPOS);
           STOUTL(" positions are needed.");
           return
        }
     else
        if DIDPT=MAXDEPTH1-1 then {
           STROUT("The global data arrays are completely initialized.");
           STROUT("Increase MAXDEPTH1 and recompile if terms with");
           STROUT(" depth larger than "); AWRITE(MAXDEPTH1-1);
           STOUTL(" are needed.");
           return
        }.
(3)  [Get extent/depth.]
     if t='E' then
        repeat
           STROUT("Initialize global data for which extent?");
           CWRIT2(' ','('); AWRITE(DIPOS+1); STROUT("..");
           AWRITE(MAXPOS); STOUTL(", 0 to abort.) *");
           READ; p:=AREADR()
        until p=0 \/ ( DIPOS+1<=p /\ p <= MAXPOS)
     else
        repeat
           STROUT("Initialize global data for which depth?");
           CWRIT2(' ','('); AWRITE(DIDPT+1); STROUT("..");
           AWRITE(MAXDEPTH1-1);
           STOUTL(", -1 to abort.) *");
           READ; p:=AREADR()
        until p=-1 \/ ( DIDPT+1<=p /\ p <= MAXDEPTH1-1).
(4)  [Initialize global data.]
     if t='E' then GDINIM(p,0,0) else GDINIM(p,1,0) ||

                    GDWRTI()
[Global data write, interactive.   The user is prompted to enter if the
global data arrays should be written to OUNIT or to file.1.  Then they
are written to the specified destination.]

     safe c, CRT.

(1)  [Write to file?]
     repeat
        STOUTL("Output to console (or to file.1)? [y/n] *");
        READ; c:=UCASE(CREAD())
     until c='Y' \/ c='N'.
(2)  [Write data.]
     if c='Y' then GDWRIT 
     else {CRT:=OUNIT; OUNIT:=1; GDWRIT; OUNIT:=CRT } ||

                    TENUM()
[Term enumerate.   The user is prompted to enter if the terms should be
sorted according to depth or extent. Subsequently, the lower and the
upper border of term numbers have to be entered. Then the corresponding
terms are written to OUNIT, each one on a new line.]

     safe c, p.

(1)  [Extent/depth?]
     repeat
        STOUTL("Term distribution: Extent or depth? [e/d] *");
        READ; c:=UCASE(CREAD())
     until MEMBER(c,('E','D')).
(2)  [Lower border.]
     repeat
        STOUTL("Enumerate terms from number: (>=0) *"); L:=IREAD()
     until ICOMP(L,0) >= 0.
(3)  [Upper border.]
     repeat
        STROUT("Enumerate terms to number: (>=");
        IWRITE(L); STOUTL(") *"); U:=IREAD()
     until ICOMP(U,L) >= 0.
(4)  [Generate terms sorted according to extent.]
     if c='D' then go to 5;
     GDINIM(ISUM(U,1),0,1);
     p:=CNOPOS(U,DIPOS);
     while ICOMP(L,U)<=0 do {
        t:=NT2TE(L,p); TWRT(t); WRITE;
        L:=ISUM(L,1)
     };
     return.
(5)  [Generate terms sorted according to depth.]
     GDINIM(ISUM(U,1),1,1);
     p:=CDEPTH(U,DIDPT);
     while ICOMP(L,U)<=0 do {
        t:=NT2TD(L,p); TWRT(t); WRITE;
        L:=ISUM(L,1)
     } ||

[-----------------------------------------------------------------------

       Algorithms to generate a sequence of random terms.

-----------------------------------------------------------------------]

                    TRGENE(p,m,w,c) 
[Random term generator (extent).  
p, m and w are beta integers, c is a character. 
Then m random terms with up to p positions are generated. If w=1, they
are written to OUNIT, separated by lines containing the character c.]

     safe i, n, n'.

(1)  [Pathological case.]
     if NB1[p]=1 then {
        for i=1,...,m do {
           t:=NT2TE(0,p);
           if w then { TWRT(t); WRITE; CWRITE(c); WRITE }
        };
        return
     }.
(2)  [Determine argument for IRAND.]
     IFCL2(ISUM(NB1[p],1); n,n');
     if n=n' then n:=n-1.
(3)  [Determine displacement.] d:=IDIF(IMP2(1,n),1);
     i:=1.
(4)  [Begin of loop.] if i>m then return.
(5)  [Get random number in the range 0..NB1[p]-1.]
     repeat
        r:=ISUM(IRAND(n),d)
     until ICOMP(r,NB1[p])<0.
(6)  [Generate term.] t:=NT2TE(r,p).
(7)  [Write term.] if w then { TWRT(t); WRITE; CWRITE(c); WRITE }.
(8)  [End of loop.] i:=i+1; go to 4 ||

                    TRGEND(d,m,w,c) 
[Random term generator (depth).   
d, m and w are beta integers, c is a character. 
Then m random terms with depth up to d are generated. If w=1, they are
written to OUNIT, separated by lines containing the character c.]

     safe i, n, n'.

(1)  [Pathological case.]
     if MB1[d+1]=1 then {
        for i=1,...,m do {
           t:=NT2TD(0,d);
           if w then { TWRT(t); WRITE; CWRITE(c); WRITE }
        };
        return
     }.
(2)  [Determine argument for IRAND.]
     IFCL2(ISUM(MB1[d+1],1); n,n');
     if n=n' then n:=n-1.
(3)  [Determine displacement.] D:=IDIF(IMP2(1,n),1);
     i:=1.
(4)  [Begin of loop.] if i>m then return.
(5)  [Get random number in the range 0..MB1[d]-1.]
     repeat
        r:=ISUM(IRAND(n),D)
     until ICOMP(r,MB1[d+1])<0.
(6)  [Generate term.] t:=NT2TD(r,d).
(7)  [Write term.] if w then { TWRT(t); WRITE; CWRITE(c); WRITE }.
(8)  [End of loop.] i:=i+1; go to 4 ||

                    TRGENI() 
[Random term generator, interactive.   First the user has to enter if
terms distributed according to extent or depth should be generated.
Then the user is asked to enter the number of random terms to generate,
the greatest extent/depth they may have and if the terms should be
written to the console or to file.2. Then the desired terms are
computed and written to the desired output stream.]

     safe c, k, n, p, o, C, ok.

(1)  [Extent/depth?]
     repeat
        STOUTL("Term distribution: Extent or depth? [e/d] *");
        READ; k:=UCASE(CREAD())
     until MEMBER(k,('E','D')).
(2)  [Get number of terms.]
     repeat
        STOUTL("How many random terms? *");
        n:=AREADR()
     until 0<n.
(3)  [Get number of positions.]
     if k='E' then
        repeat
           STROUT("Max. extent per term (1..");
           AWRITE(MAXPOS); STOUTL(")? *");
           p:=AREADR()
        until 1<=p /\ p<=MAXPOS
     else
        repeat
           STROUT("Max. depth per term (0..");
           AWRITE(MAXDEPTH1-1); STOUTL(")? *");
           p:=AREADR()
        until 0<=p /\ p<=MAXDEPTH1-1.
(4)  [Output to console?.]
     repeat
        STOUTL("Output to console (or file.2)? [y/n] *");
        READ; c:=UCASE(CREAD())
     until c='Y' \/ c='N';
     [Which separation charcter?.]
     repeat
        STROUT("The terms will be separated by lines containing");
        STOUTL(" a single character"); 
        STROUT("(default is blank). ");
        STOUTL("Enter a character to separate terms!   *");
        READ; C:=CREAD();
        STROUT("Character '"); CWRITE(C); 
        STOUTL("' entered. Ok? [y/n] *"); READ; ok:=UCASE(CREAD())
     until ~ ok = 'N'.
(5)  [Initialize global data.]
     if k='E' then GDINIM(p,0,0) else GDINIM(p,1,0).
(6)  [Get time.] t:=CLOCK(); t':=TAU.
(7)  [Generate and display terms.]
     if c='N' then {
        o:=OUNIT; OUNIT:=2
     };
     if k='E' then TRGENE(p,n,1,C) else TRGEND(p,n,1,C);
     if c='N' then OUNIT:=o.
(8)  [Write statistics.] t:=CLOCK()-t; t':=TAU-t';
     STROUT("Generated "); IWRITE(n); STROUT(" terms with ");
     if k='E' then {
        STROUT("up to "); AWRITE(p); STROUT(" positions")
     } else {
        STROUT("depth up to "); AWRITE(p)
     };
     STROUT(" in "); AWRITE(t-t'); STROUT(" ms (+ ");
     AWRITE(t'); STOUTL(" ms in GC).") ||

[-----------------------------------------------------------------------

     Algorithms to generate a sequence of random terms. These
     algorithms use the high-level routines TRANDE and TRANDD. There
     sole purpose is to compare the performance of TRANDE and TRANDD
     to that of a direct call to the low-level routines.

-----------------------------------------------------------------------]

                    TRGENH(p,k,m,w,c)
[Random term generator, calling high-level routine.   
p, k, m and w are beta integers, c is a character. 
If k=0, m random terms with up to p positions are generated.  
If k=1,  m random terms with at most depth p are generated.  
If w=1, they are written to OUNIT, separated by lines containing the 
character c. TRGENH uses TRANDE and TRANDD.]

     safe i.

(1)  [Extent.]
     if k#0 then go to 2;
     for i=1,...,m do {
        t:=TRANDE(p);
        if w then  { TWRT(t); WRITE; CWRITE(c); WRITE }
     };
     return.
(2)  [Depth.]
     for i=1,...,m do {
        t:=TRANDD(p);
        if w then  { TWRT(t); WRITE; CWRITE(c); WRITE }
     }  ||

                    TRGNIH()
[Random term generator, calling high-level routines, interactive.
First the user has to enter if terms distributed according to extent or
depth should be generated.  Then the user is asked to enter the number
of random terms to generate, the greatest extent/depth they may have
and if the terms should be written to the console or to file.2. Then
the desired terms are computed and written to the desired output
stream. TRGNIH uses TRANDE and TRANDD.]

     safe  c, k, n, p, o, C, ok.

(1)  [Extent/depth?]
     repeat
        STOUTL("Term distribution: Extent or depth? [e/d] *");
        READ; k:=UCASE(CREAD())
     until MEMBER(k,('E','D')).
(2)  [Get number of terms.]
     repeat
        STOUTL("How many random terms? *");
        n:=AREADR()
     until 0<n.
(3)  [Get extent/depth.]
     if k='E' then
        repeat
           STROUT("Max. extent per term (1..");
           AWRITE(MAXPOS); STOUTL(")? *");
           p:=AREADR()
        until 1<=p /\ p<=MAXPOS
     else
        repeat
           STROUT("Max. depth per term (0..");
           AWRITE(MAXDEPTH1-1); STOUTL(")? *");
           p:=AREADR()
        until 0<=p /\ p<=MAXDEPTH1-1.
(4)  [Output to console?]
     repeat
        STOUTL("Output to console (or file.2)? [y/n] *");
        READ; c:=UCASE(CREAD())
     until c='Y' \/ c='N';
     repeat
        STROUT("The terms will be separated by lines containing");
        STOUTL(" a single character ");
        STROUT("(default is blank). ");
        STOUTL("Enter a character to separate terms!   *");
        READ; C:=CREAD();
        STROUT("Character '"); CWRITE(C); 
        STOUTL("' entered. Ok? [y/n] *"); READ; ok:=UCASE(CREAD())
     until ~ ok = 'N'.
(5)  [Initialize global data.]
     if k='E' then GDINIM(p,0,0) else GDINIM(p,1,0).
(6)  [Get time.] t:=CLOCK(); t':=TAU.
(7)  [Generate and display terms.]
     if c='N' then {
        o:=OUNIT; OUNIT:=2
     };
     if k='E' then TRGENH(p,0,n,1,C) else TRGENH(p,1,n,1,C);
     if c='N' then OUNIT:=o.
(8)  [Write statistics.] t:=CLOCK()-t; t':=TAU-t';
     STROUT("Generated "); IWRITE(n);
     STROUT(" terms (using TRAND"); CWRITE(k); STROUT(") with ");
     if k='E' then {
        STROUT("up to "); AWRITE(p); STOUTL(" positions")
     } else {
        STROUT("depth up to "); AWRITE(p); EMPTOB
     };
     STROUT("in "); AWRITE(t-t'); STROUT(" ms (+ ");
     AWRITE(t'); STOUTL(" ms in GC).") ||

[-----------------------------------------------------------------------

              Algorithms for statistical tasks.

-----------------------------------------------------------------------]

                    TRGSTE(f) 
[Random term generator, statistics on generation time (extent).   f is
a BETA-integer which indicates if a copy of the statistics should be
written to file.3 (f=1) or not (f=0). The user is asked to enter the
range of extents to test and the number of randomly generated terms per
extent. Then the computation time for each depth is displayed.]

     safe i, o, n, p, p', t, t', T, T'.

(1)  [Get lower border of extents.]
     repeat
        STROUT("Lower border of extents (1..");
        AWRITE(MAXPOS); STOUTL(")? *");
        p:=AREADR()
     until 1<=p /\ p<=MAXPOS.
(2)  [Get upper border of extents.]
     repeat
        STROUT("Upper border of extents (");
        AWRITE(p); CWRIT2('.','.');
        AWRITE(MAXPOS); STOUTL(")? *");
        p':=AREADR()
     until p<=p' /\ p'<=MAXPOS.
(3)  [Get number of terms.]
     repeat
        STOUTL("How many random terms per position? *");
        n:=AREADR()
     until 0<n.
(4)  [Initialize global data.] GDINIM(p',0,0).
(5)  [Get time.] T:=CLOCK(); T':=TAU.
(6)  [Write header.] BLINES(1);
     STROUT("# of pos.| generation time for "); AWRITE(n);
     STOUTL(" terms");
     STOUTL("---------+-----------------------------");
     o:=OUNIT; OUNIT:=3;
     STROUT("set title 'Statistics on Term Generation Time ");
     STROUT("for Data Type "); SWRITE(SDNAM); STOUTL(" (extent)'");
     STOUTL("set xlabel 'Term extent'");
     STROUT("set ylabel 'Generation time for "); AWRITE(n);
     STOUTL(" terms in ms' 0, -10");
     OUNIT:=o.
(7)  [Generate terms and write generation time.]
     for i=p,...,p' do {
         t:=CLOCK(); t':=TAU;
         TRGENE(i,n,0,' ');
         t:=CLOCK()-t; t':=TAU-t';
         AWRITE(i); TAB(10); CWRIT2('|',' ');
         AWRITE(t-t'); STROUT(" ms (+ "); AWRITE(t');
         STOUTL(" ms in GC)");

         if f then {
            OUNIT:=3;
            CWRIT2('#',' '); AWRITE(i); CWRITE(' '); 
            TAB(10); AWRITE(t-t'); WRITE;
            OUNIT:=o
         }
     }.
(8)  [Write time.] BLINES(1); T:=CLOCK()-T; T':=TAU-T';
     STROUT("Generated "); AWRITE(n * (p'-p+1)); STROUT(" terms in ");
     STROUT("in "); AWRITE(T-T'); STROUT(" ms (+ ");
     AWRITE(T'); STOUTL(" ms in GC).") ||

                    TRGSDE(f) 
[Random term generator, statistics on term depth (extent).   f is a
BETA-integer which states if a copy of the statistics should be written
to file.3 (f=1) or not (f=0). The user is asked to enter the maximal
term extent and the number of random terms to generate. Then a table of
the depth (first column) and the number of terms with that depth
(second column) is displayed.]

     safe d[MAXPOS+1], i, n, p, o, T, T', t.
     [d[i+1] holds the number of terms with depth i.]

(1)  [Get number of positions.]
     repeat
        STROUT("What number of positions (1..");
        AWRITE(MAXPOS); STOUTL(")? *");
        p:=AREADR()
     until 1<=p /\ p<=MAXPOS.
(2)  [Get number of terms.]
     repeat
        STOUTL("How many random terms ? *");
        n:=AREADR()
     until 0<n.
(3)  [Initialize.] GDINIM(p,0,0);
     for i=1,...,MAXPOS+1 do d[i]:=0.
(4)  [Get time.] T:=CLOCK(); T':=TAU.
(5)  [Write header.] BLINES(1);
     STOUTL("Depth  | # of terms");
     STOUTL("-------+-----------");
     o:=OUNIT; OUNIT:=3;
     STROUT("set title 'Statistics on Term Depth ");
     STROUT("for Data Type "); SWRITE(SDNAM); STOUTL(" (extent)'");
     STROUT("set xlabel 'Term depth (each term has up to ");
     AWRITE(p); STOUTL(" positions)'");
     STROUT("set ylabel 'Number of Terms (total number: ");
     AWRITE(n); STOUTL(")' 0, -10");
     OUNIT:=o.
(6)  [Generate terms.]
     for i=1,...,n do {
        t:=DEPTH(TRANDE(p));
        d[t+1]:=d[t+1]+1
     }.
(7)  [Write statistics.]
     for i=0,...,p do {
         AWRITE(i); TAB(8); CWRIT2('|',' ');
         AWRITE(d[i+1]); WRITE;

         if f then {
            OUNIT:=3;
            CWRIT2('#',' '); AWRITE(i); CWRITE(' '); 
            TAB(10); AWRITE(d[i+1]);
            WRITE; OUNIT:=o
         }
     }.
(8)  [Write time.] BLINES(1); T:=CLOCK()-T; T':=TAU-T';
     STROUT("Generated and examined "); IWRITE(n); STROUT(" terms in ");
     STROUT("in "); AWRITE(T-T'); STROUT(" ms (+ ");
     AWRITE(T'); STOUTL(" ms in GC).") ||

                    TRGSPE(f) 
[Random term generator, statistics on the extent (extent).   f is a
BETA-integer which states if a copy of the statistics should be written
to file.3 (f=1) or not (f=0). The user is asked to enter the maximal
term extent and the number of random terms to generate. Then a table of
the extent (first column) and the number of terms with that extent
(second column) is displayed.]

     safe D[MAXPOS], m, n, n', p, p', o, i, T, T'.

(1)  [Get number of positions.]
     repeat
        STROUT("What number of positions (2..");
        AWRITE(MAXPOS); STOUTL(")? *");
        p:=AREADR()
     until 2<=p /\ p<=MAXPOS.
(2)  [Get number of terms.]
     repeat
        STOUTL("How many random terms ? *");
        m:=AREADR()
     until 0<m.
(3)  [Initialize.] GDINIM(p,0,0);
     for i=1,...,MAXPOS do D[i]:=0.
(4)  [Get time.] T:=CLOCK(); T':=TAU.
(5)  [Write header.] BLINES(1);
     STOUTL("# of pos.| # of terms");
     STOUTL("---------+-----------");
     o:=OUNIT; OUNIT:=3;
     STROUT("set title 'Statistics on Term Extents ");
     STROUT("for Data Type "); SWRITE(SDNAM); STOUTL(" (extent)'");
     STROUT("set xlabel 'Term extent (up to ");
     AWRITE(p); STOUTL(")'");
     STROUT("set ylabel 'Number of Terms (total number: ");
     AWRITE(m); STOUTL(")' 0, -10");
     OUNIT:=o.
(6)  [Determine argument for IRAND.]
     IFCL2(ISUM(NB1[p],1); n,n');
     if n=n' then n:=n-1;
     d:=IDIF(IMP2(1,n),1).
(7)  [Generate terms.]
     for i=1,...,m do {
        repeat
           r:=ISUM(IRAND(n),d)
        until ICOMP(r,NB1[p])<0;

        p':=CNOPOS(r,p);
        D[p']:=D[p']+1
     }.
(8)  [Write statistics.]
     for i=1,...,p do {
         AWRITE(i); TAB(10); CWRIT2('|',' ');
         AWRITE(D[i]); WRITE;

         if f then {
            OUNIT:=3;
            CWRIT2('#',' '); AWRITE(i); CWRITE(' '); 
            TAB(10); AWRITE(D[i]);
            WRITE; OUNIT:=o
         }
     }.
(9)  [Write time.] BLINES(1); T:=CLOCK()-T; T':=TAU-T';
     STROUT("Examined "); IWRITE(m); STROUT(" random numbers in ");
     STROUT("in "); AWRITE(T-T'); STROUT(" ms (+ ");
     AWRITE(T'); STOUTL(" ms in GC).") ||

                    TRGSTD(f) 
[Random term generator, statistics on generation time (depth).   f is a
BETA-integer which indicates if a copy of the statistics should be
written to file.3 (f=1) or not (f=0). The user is asked to enter the
range of depths to test and the number of randomly generated terms per
depth. Then the computation time for each depth is displayed.]

     safe i, o, n, d, d', t, t', T, T'.

(1)  [Get lower border of number positions.]
     repeat
        STROUT("Lower border of number of depths (0..");
        AWRITE(MAXDEPTH1-1); STOUTL(")? *");
        d:=AREADR()
     until 0<=d /\ d<=MAXDEPTH1-1.
(2)  [Get upper border number of positions.]
     repeat
        STROUT("Upper border of number of depths (");
        AWRITE(d); CWRIT2('.','.');
        AWRITE(MAXDEPTH1-1); STOUTL(")? *");
        d':=AREADR()
     until d<=d' /\ d'<=MAXDEPTH1-1.
(3)  [Get number of terms.]
     repeat
        STOUTL("How many random terms per depth? *");
        n:=AREADR()
     until 0<n.
(4)  [Initialize global data.] GDINIM(d',1,0).
(5)  [Get time.] T:=CLOCK(); T':=TAU.
(6)  [Write header.] BLINES(1);
     STROUT("  Depth  | generation time for "); AWRITE(n);
     STOUTL(" terms");
     STOUTL("---------+-----------------------------");
     o:=OUNIT; OUNIT:=3;
     STROUT("set title 'Statistics on Term Generation Time ");
     STROUT("for Data Type "); SWRITE(SDNAM); STOUTL(" (depth) '");
     STOUTL("set xlabel 'Term depth'");
     STROUT("set ylabel 'Generation time for "); AWRITE(n);
     STOUTL(" terms in ms' 0, -10");
     OUNIT:=o.
(7)  [Generate terms and write generation time.]
     for i=d,...,d' do {
         t:=CLOCK(); t':=TAU;
         TRGEND(i,n,0,' ');
         t:=CLOCK()-t; t':=TAU-t';
         AWRITE(i); TAB(10); CWRIT2('|',' ');
         AWRITE(t-t'); STROUT(" ms (+ "); AWRITE(t');
         STOUTL(" ms in GC)");

         if f then {
            OUNIT:=3;
            CWRIT2('#',' '); AWRITE(i); CWRITE(' '); 
            TAB(10); AWRITE(t-t'); WRITE;
            OUNIT:=o
         }
     }.
(8)  [Write time.] BLINES(1); T:=CLOCK()-T; T':=TAU-T';
     STROUT("Generated "); AWRITE(n * (d'-d+1)); STROUT(" terms in ");
     STROUT("in "); AWRITE(T-T'); STROUT(" ms (+ ");
     AWRITE(T'); STOUTL(" ms in GC).") ||

                    TRGSDD(f) 
[Random term generator, statistics on term depth (depth).   f is a
BETA-integer which states if a copy of the statistics should be written
to file.3 (f=1) or not (f=0). The user is asked to enter the the
maximal term depth and the number of random terms to generate. Then a
table of the depth (first column) and the number of terms with that
depth (second column) is displayed.]

     safe D[MAXDEPTH1], m, n, n', d, d', o, i, T, T'.

(1)  [Get depth.]
     repeat
        STROUT("What depth (1..");
        AWRITE(MAXDEPTH1-1); STOUTL(")? *");
        d:=AREADR()
     until 1<=d /\ d<=MAXDEPTH1-1.
(2)  [Get number of terms.]
     repeat
        STOUTL("How many random terms ? *");
        m:=AREADR()
     until 0<m.
(3)  [Initialize.] GDINIM(d,1,0);
     for i=1,...,MAXDEPTH1 do D[i]:=0.
(4)  [Get time.] T:=CLOCK(); T':=TAU.
(5)  [Write header.] BLINES(1);
     STOUTL("  Depth  | # of terms");
     STOUTL("---------+-----------");
     o:=OUNIT; OUNIT:=3;
     STROUT("set title 'Statistics on Depth ");
     STROUT("for Data Type "); SWRITE(SDNAM); STOUTL(" (depth)'");
     STROUT("set xlabel 'Depth (up to ");
     AWRITE(d); STOUTL(")'");
     STROUT("set ylabel 'Number of Terms (total number: ");
     AWRITE(m); STOUTL(")' 0, -10");
     OUNIT:=o.
(6)  [Determine argument for IRAND.]
     IFCL2(ISUM(MB1[d+1],1); n,n');
     if n=n' then n:=n-1;
     D':=IDIF(IMP2(1,n),1).
(7)  [Generate terms.]
     for i=1,...,m do {
        repeat
           r:=ISUM(IRAND(n),D')
        until ICOMP(r,MB1[d+1])<0;

        d':=CDEPTH(r,d);
        D[d'+1]:=D[d'+1]+1
     }.
(8)  [Write statistics.]
     for i=0,...,d do {
         AWRITE(i); TAB(10); CWRIT2('|',' ');
         AWRITE(D[i+1]); WRITE;

         if f then {
            OUNIT:=3;
            CWRIT2('#',' '); AWRITE(i); CWRITE(' '); 
            TAB(10); AWRITE(D[i+1]);
            WRITE; OUNIT:=o
         }
     }.
(9)  [Write time.] BLINES(1); T:=CLOCK()-T; T':=TAU-T';
     STROUT("Examined "); IWRITE(m); STROUT(" random numbers in ");
     STROUT("in "); AWRITE(T-T'); STROUT(" ms (+ ");
     AWRITE(T'); STOUTL(" ms in GC).") ||

                    TRGSPD(f) 
[Random term generator, statistics on the extent (depth).   f is a
BETA-integer which states if a copy of the statistics should be written
to file.3 (f=1) or not (f=0). The user is asked to enter the maximal
term depth and the number of random terms to examine. Then a table of
the extent (first column) and the number of terms with that extent
(second column) is displayed.]

     safe d, D[MAXPOSINSTATS+1], e, i, n, o, T, T', t.

(1)  [Get term depth.]
     repeat
        STROUT("What depth (0..");
        AWRITE(MAXDEPTH1-1); STOUTL(")? *");
        d:=AREADR()
     until 0<=d /\ d<=MAXDEPTH1-1.
(2)  [Get number of terms.]
     repeat
        STOUTL("How many random terms ? *");
        n:=AREADR()
     until 0<n.
(3)  [Max. term extent to consider?]
     repeat
        STROUT("Max. term extent to consider (1..");
        AWRITE(MAXPOSINSTATS); STOUTL(")? *");
        e:=AREADR()
     until 1<= e /\ e<=MAXPOSINSTATS.
(4)  [Initialize.] GDINIM(d,1,0);
     for i=1,...,MAXPOSINSTATS+1 do D[i]:=0.
(5)  [Get time.] T:=CLOCK(); T':=TAU.
(6)  [Write header.] BLINES(1);
     STOUTL("Extent | # of terms");
     STOUTL("-------+-----------");
     o:=OUNIT; OUNIT:=3;
     STROUT("set title 'Statistics on Term Extents ");
     STROUT("for Data Type "); SWRITE(SDNAM); STOUTL(" (depth)'");
     STROUT("set xlabel 'Term extent (each term has depth up to ");
     AWRITE(d); STOUTL(")'");
     STROUT("set ylabel 'Number of Terms (total number: ");
     AWRITE(n); STOUTL(")' 0, -10");
     OUNIT:=o.
(7)  [Generate terms.]
     for i=1,...,n do {
        t:=TXTENT(TRANDD(d));
        if t<=e then
           D[t]:=D[t]+1
        else
           D[MAXPOSINSTATS+1]:=D[MAXPOSINSTATS+1]+1
     }.
(8)  [Write statistics.]
     for i=1,...,e do {
         AWRITE(i); TAB(8); CWRIT2('|',' ');
         AWRITE(D[i]); WRITE;

         if f then {
            OUNIT:=3;
            CWRIT2('#',' '); AWRITE(i); CWRITE(' '); 
            TAB(10); AWRITE(D[i]);
            WRITE; OUNIT:=o
         }
     };
     STROUT("greater"); TAB(8); CWRIT2('|',' ');
     AWRITE(D[MAXPOSINSTATS+1]); WRITE;
     if f then {
        OUNIT:=3;
        CWRIT2('#',' '); AWRITE(e+1); CWRITE(' ');
        TAB(10); AWRITE(D[MAXPOSINSTATS+1]);
        WRITE; OUNIT:=o
     }.
(9)  [Write time.] BLINES(1); T:=CLOCK()-T; T':=TAU-T';
     STROUT("Generated and examined "); IWRITE(n); STROUT(" terms in ");
     STROUT("in "); AWRITE(T-T'); STROUT(" ms (+ ");
     AWRITE(T'); STOUTL(" ms in GC).") ||

                    TRSTAT() 
[Random term generation statistics.   The user is asked to enter the
type of statistics which should be performed and if a copy of the
results is to be written to file.3.]

     safe c, o, u.

(1)  [Display menu.] BLINES(1);
     STOUTL("You have the following choices:"); BLINES(1);
     STOUTL("  Concerning terms distributed according to extent:");
     STOUTL("  t - Statistics on generation time");
     STOUTL("  d - Statistics on term depth");
     STOUTL("  e - Statistics on term extent");
     BLINES(1);
     STOUTL("  Concerning terms distributed according to depth:");
     STOUTL("  T - Statistics on generation time");
     STOUTL("  D - Statistics on term depth");
     STOUTL("  E - Statistics on term extent");
     BLINES(1);
     STOUTL("  x - Exit, return to main menu");
     STOUTL("  *");
     BLINES(1).
(2)  [Read answer.] READ; c:=CREAD();
     if ~MEMBER(c,('t','d','e','T','D','E','x','X')) then go to 1;
     if UCASE(c)='X' then return.
(3)  [Get output unit.]
     repeat
        STOUTL("Write a copy of the statistics to file.3? [y/n] *");
        READ; u:=UCASE(CREAD())
     until MEMBER(u,('Y','N'));
     if u='Y' then u:=1 else u:=0.
(4)  [Statistics.]
     case c of {
        't' do TRGSTE(u);
        'd' do TRGSDE(u);
        'e' do TRGSPE(u);
        'T' do TRGSTD(u);
        'D' do TRGSDD(u);
        'E' do TRGSPD(u)
     }.
(5)  [Finish statistics file.]
     if u then {
        o:=OUNIT; OUNIT:=3;
        STROUT("plot '< sed -e "); CWRITE('"');
        STROUT("/^[^#]/d"); CWRITE('"');
        STROUT(" -e "); CWRITE('"');
        STROUT("/^# /s/# //"); CWRITE('"');
        STOUTL(" file.3' \");
        STOUTL("notitle \"); STOUTL("with lines");
        OUNIT:=o
     } ||

[-----------------------------------------------------------------------

                  Menus and queries

-----------------------------------------------------------------------]

                    O := TRMENU()
[Main menu.  ]
     safe O.
(1)  WRITE; STOUTL("You have following choices: "); WRITE;
     STOUTL("  s - show signature descriptor"); 
     STOUTL("  w - write global data"); 
     STOUTL("  i - initialize global data"); 
     STOUTL("  e - enumerate terms"); 
     STOUTL("  r - generate random terms"); 
     STOUTL("  R - generate random terms using TRANDE or TRANDD"); 
     STOUTL("  S - statistics"); 
     STOUTL("  t - toggle term generation trace"); 
     STOUTL("  g - toggle garbage collection messages"); 
     STOUTL("  o - determine output mode");
     STOUTL("  h - help, print menu"); 
     STOUTL("  q - quit"); WRITE.
(2)  [Read answer.] O:=TRSMEN() ||

                    O := TRSMEN()
[Main menu, short.  ]
     safe CH, CU, O.
(1)  BLINES(1); STOUTL("[s/w/i/e/r/R/S/t/g/o/h/q]  * ").
(2)  READ; CH := CREAD(); CU:=UCASE(CH).
(3)  if CH = 's' then O := 1 else
     if CU = 'W' then O := 2 else
     if CU = 'I' then O := 3 else
     if CU = 'E' then O := 4 else
     if CH = 'r' then O := 5 else
     if CH = 'R' then O := 6 else
     if CH = 'S' then O := 7 else
     if CU = 'T' then O := 8 else
     if CU = 'G' then O := 9 else
     if CU = 'O' then O := 10 else
     if CU = 'Q' then O := 11 else
     O := 0 ||
