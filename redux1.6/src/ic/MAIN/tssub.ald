[-----------------------------------------------------------------------

    Subalgorithms for TS 

-----------------------------------------------------------------------]

[ #include tp.h ]
[ #include globs.h ]

                    CLRMEM(T1,T2,T3,T,C; T*1,T*2,T*3,T*,C*) 
[Clear memory.]

(1)  [Initialize.] T*1:=T1; T*2:=T2; T*3:=T3; T*:=T; C*:=C.
(2)  [Info.] STROUT("There are "); GWRITE(LENGTH(AVAIL));
     STROUT(" of "); GWRITE(NU/2); STOUTL(" list cells left.").
(3)  [Delete top set trees.] if T # () then
     { STOUTL("Do you want to delete the working top set tree? *");
       READ; c:=UCASE(CREAD()); if c = 'Y' then { T*:=(); C*:=() }
     }; if T1 # () then
     { STROUT("Do you want to delete the top set tree computed ");
       STOUTL("by levels? *"); READ; c:=UCASE(CREAD()); 
       if c = 'Y' then  T*1 := ()
     }; if T2 # () then
      { STOUTL("Do you want to delete the pruned top set tree? * ");
        READ; c:=UCASE(CREAD()); if c = 'Y' then  T*2 := ()
     }; if T3 # () then
     { STROUT("Do you want to delete the top set tree computed ");
       STOUTL("in an interleaved way? *"); READ; c:=UCASE(CREAD()); 
       if c = 'Y' then  T*3 := ()
     } ||

                    CTRSET()
[Reset counters and timers. ]

(1)  [Reset all counters.] 
     STOUTL("Do you want to reset all counters [y/n]? *");
     READ; CH:=UCASE(CREAD()); if CH = 'Y' then
     { MC:=0; NC:=0; RC:=0; UC:=0; goto 3 }.
(2)  [Reset single counters.]
     STOUTL("Reset match counter                  [y/n]? *");
     READ; CH:=UCASE(CREAD()); if CH = 'Y' then MC:=0;
     STOUTL("Reset top set node creation counter  [y/n]? *");
     READ; CH:=UCASE(CREAD()); if CH = 'Y' then NC:=0; 
     STOUTL("Reset reduction counter              [y/n]? *");
     READ; CH:=UCASE(CREAD()); if CH = 'Y' then RC:=0;
     STOUTL("Reset unification counter            [y/n]? *");
     READ; CH:=UCASE(CREAD()); if CH = 'Y' then UC:=0.
(3)  [Reset all timers.] 
     STOUTL("Do you want to reset all timers [y/n]? *");
     READ; CH:=UCASE(CREAD()); if CH = 'Y' then
     { STPWT:=-CLOCK(); GTI:=0; MTI:=0; RTI:=0; UTI:=0; return }.
(4)  [Reset single timers.]
     STOUTL("Reset stop-watch                     [y/n]? *");
     READ; CH:=UCASE(CREAD()); if CH = 'Y' then STPWT:=-CLOCK();
     STOUTL("Reset ground reduction test time     [y/n]? *");
     READ; CH:=UCASE(CREAD()); if CH = 'Y' then GTI:=0;
     STOUTL("Reset match time                     [y/n]? *");
     READ; CH:=UCASE(CREAD()); if CH = 'Y' then MTI:=0;
     STOUTL("Reset reduction time                 [y/n]? *");
     READ; CH:=UCASE(CREAD()); if CH = 'Y' then RTI:=0;
     STOUTL("Reset unification time               [y/n]? *");
     READ; CH:=UCASE(CREAD()); if CH = 'Y' then UTI:=0 ||

                    CTSHOW() 
[Show counters and timers. ]
(1)  [Show all counters.] 
     STOUTL("Number of operations performed:"); 
     STROUT("  matches:                     "); GWRITE(MC); WRITE;
     STROUT("  top set nodes created:       "); GWRITE(NC); WRITE;
     STROUT("  reductions                   "); GWRITE(RC); WRITE;
     STROUT("  unifications:                "); GWRITE(UC); WRITE.
[ (2)  [Interupt output.] STOUTL("Ready *"); READ; 
     CH:=UCASE(CREAD()); if CH = 'Y' then UC:=0.
]
(3)  [Reset all timers.] 
     BLINES(1); STROUT("Stop-watch:                    ");
     STPWT:=STPWT + CLOCK(); GWRITE(STPWT); STOUTL(" ms.");
     STPWT:=STPWT - CLOCK();
     STOUTL("Time spent during ... ");
     STROUT("  ground reduction tests:      "); 
     GWRITE(GTI); STOUTL(" ms,"); 
     STROUT("  matching:                    "); 
     GWRITE(MTI); STOUTL(" ms,");
     STROUT("  reduction:                   "); 
     GWRITE(RTI); STOUTL(" ms,"); 
     STROUT("  unification:                 "); 
     GWRITE(UTI); STOUTL(" ms,").
(4)  [Memory information.]  BLINES(1); STROUT("There are "); 
     GWRITE(LENGTH(AVAIL)); STROUT(" of "); GWRITE(NU/2); 
     STOUTL(" list cells left.")||
     
                    T*:=CITST(DT)
[Compute top set tree, in interleaved way.]

(1)  [Constructors and ground reduction test set.]
     TT:=-CLOCK(); DTCDGR(DT; C,f,D,S,T*); TT:=TT+CLOCK().
(2)  [Print data type analysis.] BLINES(1); MDTC(C,f,D,S); WRITE;
     STROUT("Time needed for data type analysis: ");
     GWRITE(TT); STOUTL(" ms."). 
(3)  [Print top set tree.] 
     STOUTL("Prefix traversal of the top set tree: ");
     L:=TSTTRV(T*,(),0,15).
(7)  [Grammar for ground normal forms.] 
     STOUTL("Ready? *"); READ; C^:=CREAD();
     TT1:=CLOCK(); G:=TSTGRM(DT,T*); TT1:=CLOCK()-TT1; GRLWRT(G);
     STROUT("Grammar extraction time: "); GWRITE(TT1); STOUTL(" ms.") ||

                    T*:=CPTST(DT)
[Compute pruned top set tree.]

(1)  [Initialize.] DTDIS(DT; N,C,V,F,A).
(2)  [Ask for depth bound.] 
     STOUTL("Input deepest level of top set: *"); d:=AREADR().
(3)  [Compute top set.] TT:=-CLOCK(); T*:=PTSCMP(C,F,A,V,d-1);
     TT:=TT+CLOCK(); TT0:=TT; TT:=TT-CLOCK().
(4)  [Check constrainedness.] T^:=TSTTRV(T*,(),0,44); b:=FALSE; 
     while T^ # () do
     { ADV(T^; t^,T^); if t^ # () then
       { b:= TRUE; TWRT(t^); STOUTL(" is constrained!") }
     }; if ~b then { T':=TSTTRV(T*,(),0,30);  TT:=TT+CLOCK() }
     else { TT:=0; goto 6 }.
(5)  [Print pruned top set.] BLINES(1);
     STOUTL("Pruned topset: "); while T' # () do
     { ADV(T'; t,T'); if t # () then { l:=l+1; TWRT(t); STROUT(" / ") }
     }; WRITE;
     STROUT("Top set size is "); GWRITE(l); CWRITE('.'); WRITE;
     STOUTL("Ready? *"); READ; C^:=CREAD().
(6)  [Print pruned top set tree.] STOUTL("Prefix traversal: ");
     L:=TSTTRV(T*,(),0,15);
     STROUT("Pruned top set tree computation time: "); GWRITE(TT0);
     STOUTL(" ms.").
(7)  [Grammar for ground normal forms.] if b then { T*:=(); return };
     STOUTL("Ready? *"); READ; C^:=CREAD();
     TT1:=CLOCK(); G:=TSTGRM(DT,T*); TT1:=CLOCK()-TT1; GRLWRT(G);
     STROUT("Grammar extraction time: "); GWRITE(TT1); STOUTL(" ms.") ||

                    T*:=CTSTL(DT)
[Compute top set tree up to level.] 

(1)  [Initialize.] DTDIS(DT; N,C,V,F,A).
(2)  [Ask for depth bound.] 
     STOUTL("Input deepest level of top set: *"); d:=AREADR().
(3)  [Compute top set.] TT:= -CLOCK(); T*:=TSTCMP(C,F,A,V,d);
     TT:=TT+CLOCK(); TT0:=TT; TT:=TT-CLOCK().
(4)  [Check constrainedness.] T^:=TSTTRV(T*,(),0,44); b:=FALSE; 
     while T^ # () do
     { ADV(T^; t^,T^); if t^ # () then
       { b:= TRUE; TWRT(t^); STOUTL(" is constrained!") }
     }; if ~b then { T':=TSTTRV(T*,(),0,30);  TT:=TT+CLOCK() }
     else { TT:=0; goto 6 }.
(5)  [Print top set.] BLINES(1);
     STOUTL("Topset: "); while T' # () do
     { ADV(T'; t,T'); if t # () then { l:=l+1; TWRT(t); STROUT(" / ") }
     }; WRITE;
     STROUT("Top set size is "); GWRITE(l); CWRITE('.'); WRITE;
     STOUTL("Ready? *"); READ; C^:=CREAD().
(6)  [Print top set tree.] STOUTL("Prefix Traversal: ");
     L:=TSTTRV(T*,(),0,15);
     STROUT("Top set tree computation time: "); GWRITE(TT0);
     STOUTL(" ms.").
(7)  [Grammar for ground normal forms.] if b then { T*:=(); return };
     STOUTL("Ready? *"); READ; C^:=CREAD();
     TT1:=CLOCK(); G:=TSTGRM(DT,T*); TT1:=CLOCK()-TT1; GRLWRT(G);
     STROUT("Grammar extraction time: "); GWRITE(TT1); STOUTL(" ms.") ||


                    DGNFAN(DT,C*,T*) 
[Display ground normal form analysis.
DT is a data type, C is the set of constructors of DT, 
and T* is a top set tree.]

(1)  [Initialize.] if T* = () then return;
     DTDIS(DT; N,C,V,F,A); 
     [Defined operators.] D:=INTDIF(F,C*);
     [Top set] S:=TSTTRV(T*,(),0,30);
     [Freeness information.] f:=FREEC(C*,A).
(2)  [Constructors, defined operators, top set.]
     BLINES(1); MDTC(C*,f,D,S); WRITE;
     STROUT("The size of the top set size is "); 
     GWRITE(LENGTH(S)); CWRITE('.'); WRITE;
     STOUTL("Ready? *"); READ; C^:=CREAD().
(3)  [Print top set tree.] 
     STOUTL("Prefix traversal of the top set tree: "); 
     L:=TSTTRV(T*,(),0,15).
(4)  [Grammar for ground normal forms.]
     STOUTL("Ready? *"); READ; C^:=CREAD();
     G*:=TSTGRM(DT,T*); GRLWRT(G*) ||

                    GRTEST(DT,R,C,G)
[Ground reducibility test.
DT is a data type, R is a set of rewrite rules with regard to which
ground reducibility is tested, C is the set of constructors of DT and 
and G is the top set tree of DT.]

(1)  [Input term.]  STOUTL("Input your term, please *"); 
     T:=TEPRS(DT). 
(2)  [Compute indictively complete positions.] 
     GTI:=GTI-CLOCK(); I:=ICPR(T,R,C,G); GTI:=GTI+CLOCK();
     TDIWRT(T,(); D); STROUT(" is "); if I = () then STROUT("not"); 
     STOUTL(" ground reducible.");
     if I # () then MCICPS(T,D,I) ||


                    b:=OSIEXT(F)
[Operator set includes external operators.
F is a set of operators. Then b is true if F includes an external
operator. In that case a message concerning the unappropiateness
of the IC programm is printed.]

(1)  [Initialize.] b:= FALSE; F':=F.
(2)  [For each f in F] while F' # () do
     { ADV(F'; f,F'); if TKIND(f) = DXT then
       { STROUT("The data type contains an external operator ");
         OPWRT(f); WRITE; 
         STOUTL("Such data types cannot be handled by the TS-program.");
         b:=TRUE; return
      } } ||

                    WRKTST(T1,T2,T3,DT; T*,C*)
[Select working top set tree.
T1, T2, T3 are possibly empty top set trees. DT is the data type.
Then T* a non-empty top set tree and C* is its constructor set if it
exists otherwise T* = (). ]

(1)  [Initilaize.] T*:=(); C*:=().
(2)  [Check.] if T1 = () /\ T2 = () /\ T3 = () then
     { STOUTL("Compute top set trees first! "); return }.
(3)  [Menue.] STOUTL("Choose one of the following top set trees: ");
     BLINES(1); if T1 # () then 
      STOUTL("  l - top set tree (computation by levels), ");
     if T2 # () then STOUTL("  p - pruned top set tree, ");
     if T3 # () then 
      STOUTL("  i - top set tree (interleaved computation),");
     STOUTL("  q -quit."); BLINES(1);
     STOUTL("Choose [l/p/q/] *"); READ; c:=UCASE(CREAD()).
(4)  [Select.] if c = 'Q' then return
               else if c = 'L' then T*:=T1
               else if c = 'P' then T*:=T2
               else if c = 'I' then T*:=T3
               else goto 3.
(5)  [Compute constructors.] if T* # () then C*:=TSTECN(T*,DT) ||
     

[-----------------------------------------------------------------------

   Menues and queries

-----------------------------------------------------------------------]

                    TSMENU(T*)
[Main menue indictive completion.]
     
(1)  WRITE; STOUTL("You have following choices: "); BLINES(1).
(2)  STOUTL("  l - compute top set tree (by levels),");
     STOUTL("  p - compute pruned top set tree,"); 
     STOUTL("  i - interleaved top set tree computation,");
     if T* # () then STOUTL("  w - select working top set,");
     if T* # () then STOUTL("  g - check ground reducibility,");
     if T* # () then
     STOUTL("  a - display data type analysis of working top set,");
     STOUTL("  d - display data type,");
     STOUTL("  s - show times and counters,"); 
     STOUTL("  r - reset times and counters,");
     STOUTL("  m - reclaim memory,"); 
     STOUTL("  t - set/unset trace options");
     STOUTL("  h - help, print menu"); 
     STOUTL("  q - quit."); WRITE ||

                     O := TSSMEN(T*)
[Short main menue indictive completion.]
     safe CH,O.
(1)  STROUT("[l/p/i/"); if T* # () then STROUT("w/g/a/");
     STOUTL("d/s/r/m/t/h/q] *");
     READ; c:=CREAD(); if c # 'o' then CH:=UCASE(c) else CH:=c.
(2)  if CH = 'L' then O := 1 else
     if CH = 'P' then O := 2 else
     if CH = 'I' then O := 3 else
     if CH = 'W' then O := 4 else
     if T* # () /\  CH = 'G' then O := 5 else
     if T* # () /\  CH = 'A' then O := 6 else
     if CH = 'D' then O := 7 else
     if CH = 'S' then O := 8 else
     if CH = 'R' then O := 9 else
     if CH = 'M' then O := 10 else
     if CH = 'T' then O := 11 else
     if CH = 'H' then O := 12 else
     if CH = 'Q' then O := 0 else O := 12 ||

