
[ *** End of Global Safe Variables ***]

     safe DUNIT,CRT.  [i/o units.]
     safe FREE.       [is data type freely generated by constructors?]
     safe CH.         [user input.]

(1)  [Initialize ReDuX system.] BGNRWD(4).
(2)  [Output breadth: 80 characters.] RMARG:=79.
(3)  [Garbage collector messages on.] GCM:=1;
     [ [ALDES trace settings.] TRMAX:=500; COUNT:=1 ]
     [Reset timers.] RTI:=0; MTI:=0; CTI:=0; UTI:=0; OTI:=0; STI:=0;
     PTI:=0; GTI:=0; STPWT:=-CLOCK();
     [Reset counters.] UC:=0; MC:=0; RC:=0; NC:=0; OC:=0;
     [ReDuX traces off.] IETRC:=0; PNTRC:=0; CETRC:=0; STRC:=0;
     POTRC:=0; TOTRC:=0; TRC1:=0; TRC2:=0; TRC3:=0; DLTRC:=0; EXTRC:=0.
(4)  [Use fort.4 as input file for data type.] DUNIT:=4.
(5)  [Welcome message.]
     STOUTL("-><--><--><--><--><--><--><--><--><--><--><--><-");
     STOUTL("|                                              |");
     STOUTL("|          ReDuX induction laboratory          |");             
     STOUTL("V                                              V");
     STOUTL("->->->->->->->->->->-><-<-<-<-<-<-<-<-<-<-<-<-<-");
     BLINES(1); STOUTL("           [$Revision: 1.1 $]      ");
     BLINES(1).
(6)  [Set input unit to stream 4.] CRT:=IUNIT; IUCHNG(DUNIT); ISIZE:=80.
(7)  [Load data type.] STOUTL("Loading your data type ...");
     t:=CLOCK(); DT:=DTPRS(); t:=CLOCK()-t;
     STROUT("Acception time: "); GWRITE(t); STOUTL(" ms.").
(8)  [Set input unit back to keybord.] IUCHNG(CRT); ISIZE:=80.
(9)  [Write data type.] BLINES(1); t:=CLOCK(); DTWRT(DT); t:=CLOCK()-t;
     STROUT("Display time: "); GWRITE(t); STOUTL(" ms."); BLINES(1);
     STOUTL("Ready? *"); READ; CH:=CREAD().
(10) [Appropitness check.] DTDIS(DT; N,C,V,F,A);
     if OSIEXT(F) then goto 99.
(11) [Initialize term orderings.] O0:=TORDIN(DT); O*:=TORDSE(DT,O0);
     A':=A; if MEMBER('S',O*) then o:='H' else o:='S'; 
     while A' # () /\ o = 'S' do
     { ADV(A'; a,A'); ADIS(a;n,t1,VHS,t2,l_); CP:=CPCONS(t1,t2,0,0,());
      o:=TPPO(CP,O*); ORDWRT(t1,t2,o)
     }; MCTERM(o); if o = 'R' then goto 13.
(12) [Convergence test.]  C':= RSDCPS(A); A_:=ALCOPY(A); R:=ALCOPY(A);
     CH:=MCCONF(C',N); if CH # 'Y' then goto 14.
(13) [Complete data type.] STOUTL("Continue *"); READ;
     [Completion.] t:=-CLOCK(); D*:=DTKBC(DT,O*); t:=t+CLOCK();
     [Issue statistics.] STROUT("The completion time is "); 
     GWRITE(t); STOUTL(" ms."); BLINES(1);
     [Write complete type.] STOUTL("Continue *"); READ;
     t:=-CLOCK(); DTWRT(D*); t:=t+CLOCK();
     STOUTL("Continue *"); READ;
     STROUT("Display time: "); GWRITE(t); STOUTL(" ms."); BLINES(1);
     DT := D*; DTDIS(DT; N,C,V,F,A); A_:=ALCOPY(A); R:=ALCOPY(A).
(14)  [Analyse data type.]                      
     WRITE; STOUTL("Do you want to set trace options [y/n]? *");
     READ; CH:=UCASE(CREAD()); WRITE; if CH='Y' then QCT();
     t:=-CLOCK(); DTCDGR(DT; C*,FREE,DO,T*,G); t:=t+CLOCK();
     BLINES(1); STROUT(" The ground normal form analysis took ");
     GWRITE(t); STOUTL(" ms.").
(15) [Main menue.] BLINES(1); c:=11; repeat
         case c of 
         { 1  do GNFANA(DT,C*,FREE,DO,T*,G);
           2  do NORMAL(DT);
           3  do GRTEST(DT,R,C*,G);
           4  do PROVE(DT,C*,G,T*,FREE,O*,R,A_; DT,R,T*,G);
           5  do ASWRT(A_);
           6  do DTWRT(DT);
           7  do CTSHOW;
           8  do CTRSET;
           9  do QCT();
           10  do QCTOID(DT,O*; O0,O*);
           11  do ICMENU; 
           12  do O*:=TERTST(O0,DT);
         }; c:=ICSMEN(); 
      until c = 0.
(99)  [Finish up.] ENDS||                                               
