[Project: automated induction 
   module name        : ICINT -- INTeractive 
   modulespecification: interactive algorithms for inductive completion.
   programmer         : Reinhard Buendgen             
   language           : aldes                                           
   last change        : $Date: 1995/07/25 10:08:54 $
                        by $Author: buendgen $
   version            : $Revision: 1.2.1.5 $
   bugs               : none known                         
   modules needed     : sac2/bs, sac2/sy, sac2/lp,                      
                        redux/tp
]                                                                      

[ #include tp.h ]
[ #include globs.h ]

 
[--------------------------------------------------------------------- 
     section 3.                                                         
     Interactive queries.                                               
----------------------------------------------------------------------]
 
                    PWRITE(T,T*)                                       
[Position write.  T is a term and T* is a subterm of T. Then the        
position of T* in T is written.]
     safe T',i.                                
(1)  [Initialize.] T':=T; p:=SBTRM(T*,T').
(2)  [Imposs. Case.] if p = 0 then 
     STOUTL("*** impossible situation in PWRITE.2").
(3)  [Write.] if p = () then CWRIT2('/','\') else while p # () do
     { ADV(p; i,p); GWRITE(i); if p # () then CWRITE('.') } ||
 
 
                    s:=QCIH(EP,IP,d)                                 
[Query concerning induction hypothesis.                                
EP is an essential critical pair. IP is an inessential critical pair. 
d  is an  integer between  1 and 3.  Then s = INESS  if IP is to  be 
choosen as the next induction hypothesis. Otherwise s = ESS.]
     safe s,CH.          
(1)  WRITE; STOUTL("The essential critical pair");  CPWRT(EP);
     WRITE; STROUT("can be reduced by ");
     STOUTL("the inessential critical pair"); CPWRT(IP);
     WRITE; STROUT("using ");
     if d=1 \/ d=3 then STROUT("a straight");
     if d=3 then STROUT(" or ");
     if d=2 \/ d=3 then STROUT("a reverse");
     STOUTL(" ordering.");
     STROUT("Do you want to treat the inessential critical pair ");
     STROUT("next [y/n]? *"); WRITE; READ; CH:=CREAD();
     if CH='Y' \/ CH='y' then s:=INESS else s:=ESS||                             
                    CH:=QCC(DT)                                        
[Query concerning continuation.] 
     safe CH.                                       
(1)  WRITE; STOUTL("You have the following choices: ").
(2)  STOUTL(" B - continue using the basic axiom set,").
(3)  STOUTL(" L - continue using the last axiom set,").
(4)  if DT # () then STOUTL(" N - continue using the new axiom set,").
(5)  STOUTL(" E - exit program."); WRITE.
(6)  WRITE; STOUTL("Enter your choice [B/L/N/E]! *"); READ; 
     CH:=UCASE(CREAD()).
(7)  if CH='B' \/ CH='E' \/ CH='L' then return.
(8)  if CH='N' /\ DT # () then return.
(9)  goto 1||                                                          
 
 
                    i:=QCPS(T,I)                                    
[Query concerning inductively complete position set.
T is a term and I is a non-empty list of IC-lists. 
Then i is an IC-list of I.] 
      safe  n,I',N,i.                  
(1)   TDIWRT(T,(); D); STROUT(" is "); STOUTL("inductively reducible.").
(2)   MCICPS(T,D,I); n:=LENGTH(I);
      STROUT("Choose position set [1 - "); GWRITE(n);
       STOUTL("]. *"); READ; N:=AREADR();
       if N > n \/ N < 1 then goto 2; I':=I;
       for i=2,...,N do I':=RED(I'); i:=FIRST(I') ||             
 
 
                    O := QCMM() 
[Query - main menue.]
     safe CH,O.
(1)  WRITE; STOUTL("You have the following choices: "); WRITE.
(2)  STOUTL("  R - reduce a term,");
     STOUTL("  P - prove a theorem,");
     STOUTL("  B - display the basic axioms,");
     STOUTL("  C - display the current data type,");
     STOUTL("  O - select a term ordering,");
     STOUTL("  E - exit."); WRITE.
(3)  STOUTL("[R/P/B/C/O/E] *"); READ; CH := CREAD().
(4)  if (CH = 'R') \/ (CH = 'r') then O := 1 else
     if (CH = 'P') \/ (CH = 'p') then O := 2 else
     if (CH = 'B') \/ (CH = 'b') then O := 3 else
     if (CH = 'C') \/ (CH = 'c') then O := 4 else
     if (CH = 'O') \/ (CH = 'o') then O := 5 else
     O := 0||
                                                                       
[--------------------------------------------------------------------- 
     section 4.                                                         
     Message handling.                                                  
----------------------------------------------------------------------]
                                                                       
                    MCCPC(CE,CI)                                       
[Message concerning critical pair creation.]                            
                                                                      
(1)  GWRITE(LENGTH(CE)); STOUTL(" essential pairs created.").
(2)  GWRITE(LENGTH(CI)); STOUTL(" inessential pairs created.")|| 
                                                                       
                    MCGV(T,t,D)
[Message concerning general validity.]

(1)  STROUT("The theorem "); ADIS(T; n,L,V,R,b); TDIWRT(L,(); N); 
     BLKW(1); SWRT(DPS); BLKW(1); TDIWRT(R,N; N'); WRITE;
     STROUT("is valid in all models of the data type "); SWRT(D); 
     CWRITE('.'); WRITE.
(2)  STROUT("Both terms can be reduced to "); TDIWRT(t,N'; N'); 
     CWRITE('.'); WRITE.
(3)  STOUTL("Continue *"); READ||

                    MCICPS(T,D,I)
[Message concerning inductively complete position set.
T is a term, D the variable dictionary of T and I is a list of 
IC-lists.]
      safe  n,I',i',R*,P',p,r.
(1)   n:=0; I':=I; D':=D;
      while I' # () do
       {ADV(I'; i',I'); n:=n+1;
        R*:=SECOND(i'); P':=FIRST(i'); GWRITE(n);
        STOUTL(". The set of positions: ");
        while P' # () do
        { ADV(P'; p,P'); TDIWRT(p,D'; D'); STROUT(" at pos. ");
         PWRITE(T,p); WRITE
        }; STOUTL("is inductively complete with rules: "); 
        while R* # () do {ADV (R*; r,R*); AXWRT(r); WRITE};
        CWRITE(' ');
       } ||

                    MCIECP(IP)                                         
[Inessential critical pair message.
IP is a list of inessential critical pairs. IP is written.]  
     safe CH.                                                                 
(1)  if IP=() then                                                     
     { STOUTL("No inessential critical pairs."); return }.
(2)  STOUTL("Inessetial critical pairs: ").
(3)  CPLWRT(IP); STOUTL("Ready? *"); READ; CH:=CREAD()||         
 
 
                    MCPIV(T,N) 
[Message concerning possible inductive validity.]
(1)  STROUT("The theorem "); AXWRT(T); WRITE; STROUT("is ");
     STOUTL("not an equational consequence, "). 
(2)  STOUTL("it may however be an inductive consequence of");
     STROUT("the "); SWRT(N); STOUTL(" data type.").
(3)  STOUTL("Continue *"); READ||

 
                    MDISPR(T)                                          
[Message of disproof.]                                                  
(1)  STOUTL("The set of equations");
     ASWRT(T); STROUT(" is not an inductive consequence of the ");
     STROUT("data type")||                                              
 
                    MDTC(C,f,D,G)                                   
[Data type composition message.] 
      safe C*,D*,T*,t,c.                                       
(1)   WRITE; STOUTL("Data type composition:"); 
      if f=TRUE then STROUT("free ");
      C*:=C; D*:=D; T*:=G; STOUTL("constructors: "); 
      while C* # () do                                                 
      { ADV(C*; c,C*);
       if TKIND(c)=DCS then CONWRT(c) else OPWRT(c); WRITE;
      }; STOUTL("defined function symbols: "); 
      while D* # () do                                                 
      { ADV(D*; c,D*);
       if TKIND(c)=DCS then CONWRT(c) else OPWRT(c); WRITE;
      }; if T* # () then 
     { STOUTL("ground reduction test set: "); 
      while T* # () do { ADV(T*; t,T*); TWRT(t); WRITE };
     }||                          
 
                    MPROOF(A_,A,T,N)                                   
[Message about successful proof.] 
     safe CH,LHS,V^*,RHS,A',a.                                     
(1)  ARDIS(T; LHS,V^*,RHS); WRITE; RRWRT(LHS,RHS);
     STROUT(" is an inductive theorem of the ");
     SWRT(N); STOUTL("-data-type."); WRITE.
(2)  STOUTL("The basic axiom set: "); ASWRT(A_).
(3)  WRITE; STOUTL("Ready? *"); READ; CH:=CREAD();
     if CH # 'Y' /\ CH # 'y' /\ CH # ' ' then goto 3.
(4)  STOUTL("New theorem and lemmas: "); A':=A; while A' # () do
     { ADV(A'; a,A'); if ASMEMN(a,A_)=FALSE then {AXWRT(a); WRITE} }.
(5)  WRITE; STOUTL("Ready? *"); READ; CH:=CREAD();
     if CH # 'Y' /\ CH # 'y' /\ CH # ' 'then goto 5||

[
                    MTSXIT(N)
[Message on exit from top set computation.
N is the name of the data type.]

(1)  BLINES(1); STROUT("The analysis of the "); SWRT(N);
     STOUTL("-data-type succeeded."); BLINES(1).
(2)  AWRITE(UC); STROUT(" unifications and ");
     AWRITE(MC); STROUT(" matches attempted. ");
     AWRITE(RC); STOUTL(" rewrites performed."); 
     AWRITE(NC); STOUTL(" terms created."); BLINES(1).
(3)  STROUT("Unification-time="); AWRITE(UTI); STOUTL(" ms.");
     STROUT("Rewriting-time = "); AWRITE(RTI); STOUTL(" ms. ");
     STROUT("Matching-time = "); AWRITE(MTI); STOUTL(" ms. ");
     [STROUT("Ground red. test set comp.- time = "); AWRITE(TTI);]
     STOUTL(" ms.") ||
]
