[Project: Term Orderings
   module name        : TOKB -- Knuth-Bendix ordering algorithms
   modulespecification: algorithms for Knuth-Bendix ordering
   programmer         : Wolfgang Kuechlin                  
   language           : aldes                             
   last change        : 09-Jul-1990 [MIC] 
                        $Date: 1994/12/21 20:23:00 $
                        by $Author: buendgen $
                        critical pairs may be semi-bound
   version:           : $Revision: 1.9 $
   bugs               : non known                       
   modules needed     : 
]

[ #include tp.h ]
[ #include globs.h ]

[---------------------------------------------------------------------.
     Section 1.                                     
     Ordering level initialization. and removal               
-----------------------------------------------------------------------]
                                                  
                    BGNKBO(T)                    
[Begin Knuth-Bendix ordering.                   
Initialization  routine  on  ordering  level. T is a data-type. Operator
weights are interactively input into T.]       
     safe N,C,V,F,A,i',w',w0,C',F',V',c,f,v,p.
(1)  [Initialize.] KBOW:=SCONS("KB-operator-weight");
     KBOI:=SCONS("KB-operator-index"); DTDIS(T; N,C,V,F,A); w0:=BETA;
     CLOUT("for defining a Knuth-Bendix ordering on type ");
     SWRT(N); BLINES(1);
     h:="give non-negative indexes and weights for ";
     i:="  index *"; w:=" weight *".
(2)  [Constants.] if C # () then                                      
     {CLOUT(h); CLOUT("constants (weights all positive)"); EMPTOB};
     C':=C; while C' # () do                        
     {ADV(C'; c,C'); CONWRT(c); CLOUT(i); WRITE; READ();
      i':=AREADR(); TPUT(c,KBOI,i'); CLOUT(w); WRITE; READ();
      w':=AREADR(); TPUT(c,KBOW,w'); w0:=MIN(w0,w')}.
(3)  [Operators.] BLINES(1); if F # () then                           
     {CLOUT(h); CLOUT("operators "); WRITE; CWRITE('('); CLOUT(       
      "weights for unary operators all positive, with the"); WRITE;
      CLOUT("possible exception of the operator with largest index.");
      CWRITE(')'); WRITE};
     F':=F; while F' # () do                       
     {ADV(F'; f,F');OPWRT(f);WRITE; CLOUT(i); WRITE; READ();
      i':=AREADR(); TPUT(f,KBOI,i'); CLOUT(w); WRITE; READ();
      w':=AREADR(); TPUT(f,KBOW,w');
      if ODTYPE(f)=() then w0:=MIN(w0,w')}.
(4)  [Variables.]  V':=V; while V' # () do        
     {ADV(V'; v,V'); TPUT(v,KBOI,-1); TPUT(v,KBOW,w0)} ||           



                    ENDKBO(DT)
[End Knuth-Bendix ordering.
Removes the Knuth-Bendix-ordering from the property list of data-type 
DT, if installed. Otherwise leaves it as is.]
     safe N,C,V,F,A.
(1)  [Initialize] DTDIS(DT; N,C,V,F,A).
(2)  [Constants] C':=C; while C' # () do
     { ADV(C'; c,C'); b:=TPRRM(c,KBOI);  b:=TPRRM(c,KBOW) }.
(3)  [Operators] F':=F; while F' # () do
     { ADV(F'; f,F'); b:=TPRRM(f,KBOI); b:=TPRRM(f,KBOW) }.
(4)  [Variables] V':=V; while V' # () do
     { ADV(V'; v,V'); b:=TPRRM(v,KBOI); b:=TPRRM(v,KBOW) } ||

                                                                       
[---------------------------------------------------------------------.
     Section 2.                                  
     Ordering algorithms.                       
-----------------------------------------------------------------------]
                                               
                    C^:=CPKB(C')              
[Critical pair, Knuth-Bendix ordering.       
C'=(t1,t2)  is  a  critical pair. Then C^='S' if t1 > t2, C^='R' if
t2 > t1, C^='=' if t1 and t2 are equivalent and C^='H' if t1 and t2 are 
incomparable, according to the Knuth-Bendix ordering.]                     
     safe CPKB.                                                       
(1)  [Initialize.]  CPDIS(C'; t*1,t*2,n1,n2,E); 
     t1:=TSFS(t*1); t2:=TSFS(t*2).
(2)  [Compute weights.] w1:=TKBW8(t1);  w2:=TKBW8(t2).
(3)  [Compare terms.] C^:='H';
     if      w1 > w2 then b1:=TPOKBC(t1,t2,1) 
     else if w1 = w2 then { b1:=TPOKBC(t1,t2,0); b2:=TPOKBC(t2,t1,0) }
                     else b2:=TPOKBC(t2,t1,1);
     if w1 > w2 /\ b1 = 1 then  C^:='S'
     else if w2 > w1 /\ b2 = 1 then  C^:='R'
     else if w1 = w2 then if      b1 = 1 then C^:='S'
                          else if b2 = 1 then  C^:='R'
                          else if b1 = 0 /\ b2 = 0 then C^:='=' ||
 
                    b:=TPOKBC(T1,T2,g)    
[Pair of terms, ordering by Knuth-Bendix comparison.
T1  and  T2  are  semi-bound terms  without top substitutions such  that 
the weight of T1 in the Knuth-Bendix ordering is greater or equal to the 
weight of T2. g=1 if the weight  of T1  is  greater than, and g=0 if it 
is equal to, the weight of T2. 
Then b=1 if T1 > T2 in the Knuth-Bendix ordering, b=0 if T1=T2, and 
b < 0 otherwise.]                                                          
     safe b,n,v,t1,t2,i1,i2,w1,w2.                          
(1)  [Initialize.]  b:=-1; n:=0.
(2)  [Compare frequency of variable occurrences. [MIC 09-Jul-1990]]
     V1:=TVLOC(T1,()); V2:=TVLOC(T2,());
     if V2=() then { if V1 # () then n:=1; go to 3};
     if V1=() then return;
     repeat 
       ADV2(V2;v,n2,V2); L:=ASSOC(v,V1); 
       if L = () then n1:= 0 else n1:=FIRST(L);
       [according to U. Martin obsolete: if n1 > n2 then n:=1 else] 
       if n2 > n1 then return;
     until V2=().
(3)  [Case 1.]  if g=1 then {b:=1; return}.
(4)  [Case 2.]  [according to U. Martin obsolete: if n # 0 then return;]
     i1:=TGET(T1,KBOI); i2:=TGET(T2,KBOI);
     if i2 > i1 then return; if i1 > i2 then {b:=1; return};
     if TSIGN(T1) # TSIGN(T2) then return;
     if TKIND(T1) = DXT then return;
     L1:=OARGLST(T1); L2:=OARGLST(T2); b:=0; while L1 # () /\ b=0 do       
     { ADV(L1; t1,L1); ADV(L2; t2,L2); 
      t'1:=TSFS(t1); t'2:=TSFS(t2); w1:=TKBW8(t'1); w2:=TKBW8(t'2);
      if w2 > w1 then b:=-1 else                                     
      if w1 > w2 then b:=TPOKBC(t'1,t'2,1) else                      
      if w1=w2 then b:=TPOKBC(t'1,t'2,0) } ||                         
                                                                       
                    w:=TKBW8(T)
[Term, Knuth-Bendix weight.   
T is a semi-bound term without top substitutions.
Then w is its Knuth-Bendix weight.] 
     safe k,w.                                                        
(1)  [Initialize.] k:=TKIND(T).
(2)  [Basis of left recursion. Constant or variable.]
     if k=DCS \/ k=DVS then  {w:=TGET(T,KBOW); return};
     [External term.] if k = DXT  then  {w:=TGET(T,KBOW); return}.
(3)  [Operator. Non-atomic term.] w:=TNKBW8(T) ||   
                                                   
                    w:=TNKBW8(T)                   
[Non-atomic term. Knuth-Bendix weight.           
T is a semi-bound term without top substitution. 
Then w is its Knuth-Bendix weight.]
     safe w',t,k.                                                    
(1)  [Initialize.]  L:=OARGLST(T); w':=TGET(T,KBOW); w:=0.
(2)  [Right recursion. Process list of operands.] w:=w+w';
     [Basis.] if L=() then return.
(3)  [Step. Initialize left recursion.] ADV(L; t*,L); t:=TSFS(t*).
(4)  [Left recursion. Process operand.] k:=TKIND(t);
     [Bases. Atomic terms. Constant or variable.]              
     if k=DCS \/ k=DVS then {w':=TGET(t,KBOW); goto  2};
     [External term.] if k = DXT  then  { w':=TGET(T,KBOW); goto 2 }.
(5)  [Step of left recursion. Non-atomic term.]               
     w':=TNKBW8(t); go to  2 ||                              
                                                            
                    V*:=TVLOC(T,V)                        
[Term, variable-list with occurrences.         
T is a semi-bound term without top substitutions, subterm of some 
superterm T^. V = (v1, n1, ...,vk, nk) is a list of of period 2 of 
variables vi and beta-integers ni s. th. each variable vi occurs ni 
times in T^ to the left of T.
Then V* is V updated such that the variables occuring in T are added
(either by increasing an appropriat ni, or by adding a new pair v, n)
to V .V is destroyed.]
     safe k.
(1)  [Initialize.] V*:=V; k:=TKIND(T).
(2)  [Constant.] if k=DCS \/ k = DXT then return.
(3)  [Variable.] if k=DVS then 
     { if VARBIND(T) # () then 
       { CLOUT("TVLOC: non-free var found."); WRITE };
       V_:=ASSOC(T,V*); if V_ = () then V*:=COMP2(T,1,V*) else
       { n:=FIRST(V_); SFIRST(V_,n+1) }
     }.
(4)  [Operator. Recursive descend.] c:=OARGLST(T); while c # () do 
     { ADV(c; t,c); V*:=TVLOC(TSFS(t),V*) } ||
