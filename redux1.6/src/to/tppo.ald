[ $Author: buendgen $
  $Date: 1993/10/08 09:53:52 $
  $Revision: 1.7 $
]

[ #include "tp.h" ]
[ #include "globs.h" ]

                    c:=TPPO(CP,O)
[Term pair partial ordering.
 CP is a critical pair. O is a list of characters, each of which
 corresponds to a term ordering:
 'K' Knuth-Bendix ordering; must be initialized by BGNKBO(DT).
 'P' recursive path ordering; must be initialized by BGNPO(DT).
 'Y' polynomial ordering; must be initialized e.g. by BGNPYO(DT,i).
 TPPO tries to order the terms of the critical pair CP according to
 FIRST(O) and descends on failure. It is assumed that any necessary 
 initialization of the orderings is done.
 Then c is the return value
    'R' iff S < T,
    'S' iff S > T,
    '=' iff S and T are equal and
    'H' iff S and T are not comparable with respect to O.
 The global variable TOTRC determines whether TPPO is to be traced or
 not.
 The elapsed time during the ordering by TPPO and its subalgorithms is
 accumulated in global variable OTI.]

(1)   [Init and start timer.] OC:=OC+1; OTI:=OTI-CLOCK(); O*:=O;
      if O* # () then c := '=' else { c:='H'; OTI:=OTI+CLOCK(); return}.
(2)   [End condition, stop timer and return.]
      if O*=() \/ c='S' \/ c='R' \/ c='H' then 
      { OTI:=OTI+CLOCK(); return }.
(3)   [Try next ordering.] ADV(O*; o,O*);
      case o of {[Call ordering.]
         'K' do {c:=CPKB(CP); goto 5};
         'P' do {c:=CPPO(CP); goto 5};
         'R' do {c:='R'; goto 5};
         'S' do {c:='S'; goto 5};
         '1' do {c:=CPPI(CP,1); goto 5};
         '2' do {c:=CPPI(CP,2); goto 5};
         '3' do {c:=CPPI(CP,3); goto 5};
         '4' do {c:=CPPI(CP,4); goto 5};
         '5' do {c:=CPPI(CP,5); goto 5};
         '6' do {c:=CPPI(CP,6); goto 5};
         '7' do {c:=CPPI(CP,7); goto 5};
         '8' do {c:=CPPI(CP,8); goto 5};
         '9' do {c:=CPPI(CP,9); goto 5} }.
(4)   [Failure.] OTI:=OTI+CLOCK(); STROUT("TPPO: ordering '");
      CWRITE(o); STOUTL("' not implemented."); OTI:=OTI-CLOCK().
(5)   [Switch off timer and do trace.] if TOTRC then 
      { OTI:=OTI+CLOCK(); CLOUT("TPPO: '"); CWRITE(o); STROUT("' "); 
        case c of { 'R' do STROUT("ordered reverse.");
                    'S' do STROUT("ordered straight.");
                    '=' do STROUT("- equivalent");
                    'H' do STROUT("failed.")
                  }; WRITE; OTI:=OTI-CLOCK()
      }.
(6)   [Loop.] goto 2 ||
