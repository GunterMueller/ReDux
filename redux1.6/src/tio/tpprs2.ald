[Project: ReDuX Term Primitives 
   module name        : TPPRS -- PaRSe data type (part2)
   modulespecification: Parsing algorithms from old parser needed in
                        new parser.
   programmer         : Reinhard Buendgen
   language           : aldes
   last change        : $Date: 1996/06/21 08:13:26 $ 
                        by $Author: buendgen $
   version            : $Revision: 1.5 $
   bugs               : none known
   modules needed     : SAC-2: low/bs, low/sy, low/lp

]

[ #include "tp.h" ]
[ #include "globs.h" ]

[---------------------------------------------------------------------
     Section 1.  Algorithms for Export
----------------------------------------------------------------------]

                    b:=OACC(o)
[Operator, AC consistency.
o is an operator. Then b = true if o is a binary operator with
domain(o) = range(o) X range(o). Otherwise b = false.]
(1)  [Initialize.] y:=ORTYPE(o); Y:=ODTYPE(o); b:=FALSE.
(2)  [Arity.] if LENGTH(Y) # 2 then return.
(3)  [Type compatibility.] if FIRST(Y)=y /\ SECOND(Y)=y then b:=TRUE ||

                    b:=OCOMC(o)
[Commutative operator consistencey.
o is a commutative operator. 
Then b is true if o is binary and both arguments are of the same type.]
(1)  [Initialize.] Y:=ODTYPE(o); b:=FALSE.
(2)  [Arity.] if LENGTH(Y) # 2 then return.
(3)  [Type compatibility.] if FIRST(Y) = SECOND(Y) then b:=TRUE || 

                    OSUCF(O) 
[Operator set update coercion functions.
O is a set of operators. For each operator o that has a property a
symbol denoting an external operator s under indicator DXCO this 
property (symbol) will be replaced by the external operator with 
name s.]

(1)  [Initialize.] O':=O.
(2)  [Trivial case.] if O' = () then return.
(3)  [Check operator.] ADV(O'; o,O'); s:=TGET(o,DXCO); 
     if s = () then goto 2.
(4)  [Search coercion operator.] F:=O; while F # () do
     { ADV(F; f,F); if f = s /\ TKIND(f) = DXT then goto 2;
       if s = TNAME(f) /\ TKIND(f) = DXT then 
       { TPUT(o,DXCO,f); goto 2 }
     }.
(5)  [Warning.] STROUT(" *** Warning: coercion operator not found. ");
     STOUTL(" Property removed!"); TPUT(o,DXCO,()); goto 2 ||

                    T:=STOCC(n,L)
[Symbol-table, occurrence.
n is a name, L is a data-type symbol table. Then T=() if no symbol in L
has name n, otherwise T is the first symbol in L with name n.]
     safe STOCC.
(1)  [Initialize.]  L':=L.
(2)  [Trivial case.] if L'=() then { T:=(); return }.
(3)  [Step.] ADV(L'; T,L'); if n # TNAME(T) then go to  2 ||


  

